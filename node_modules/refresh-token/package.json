{
  "name": "refresh-token",
  "version": "0.0.2",
  "description": "Returns a new oauth2 access token when expired.",
  "main": "lib/refresh.js",
  "keywords": [
    "oauth2",
    "oauth",
    "refresh",
    "token"
  ],
  "scripts": {
    "test": "mocha --require should"
  },
  "repository": "",
  "author": {
    "name": "Jos√© F. Romaniello",
    "email": "jfromaniello@gmail.com",
    "url": "http://joseoncode.com"
  },
  "license": "MIT",
  "dependencies": {
    "request": "~2.12.0"
  },
  "devDependencies": {
    "should": "~1.2.1",
    "mocha": "~1.7.4"
  },
  "readme": "Helper function to get always an oauth 2 valid token given a refresh token. \n\n[The mechanism is explained here](http://tools.ietf.org/html/draft-ietf-oauth-v2-10#section-4.2).\n\nIf the token has expired, it will fetch a newone, otherwise it will return the current access token. \n\n\n## Install  \n\n    npm install refresh-token\n\n## Usage\n\n~~~javascript\nvar TokenProvider = require('refresh-token');\n\nvar tokenProvider = new TokenProvider('http://token-url', {\n    refresh_token: 'refresh token', \n    client_id:     'client id', \n    client_secret: 'client secret'\n    /* you can pass an access token optionally\n    access_token:  'fdlaksd',\n    expires_in:    2133\n    */\n  });\n\ntokenProvider.getToken(function (err, token) {\n //token will be a valid access token.\n});\n~~~\n\nThere is also a GoogleTokenProvider which has the url already set:\n\n~~~javascript\nvar GoogleTokenProvider = require('refresh-token').GoogleTokenProvider;\n\nvar tokenProvider = new GoogleTokenProvider({\n    refresh_token: 'refresh token', \n    client_id:     'client id', \n    client_secret: 'client secret'\n  });\n~~~\n\n## License \n\n**MIT**\n\n",
  "readmeFilename": "README.md",
  "_id": "refresh-token@0.0.2",
  "dist": {
    "shasum": "7e234390330b5582fb894521d99f75682effef7a"
  },
  "_from": "refresh-token@",
  "_resolved": "https://registry.npmjs.org/refresh-token/-/refresh-token-0.0.2.tgz"
}
